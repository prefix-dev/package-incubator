--- /home/memento/PycharmProjects/staged-recipes-2/build_artifacts/src_cache/v1_15_3_692604eb/build.sh	2024-09-17 03:09:19.000000000 -0500
+++ build.new.sh	2025-01-24 15:30:24.984659038 -0600
@@ -18,4 +18,8 @@
 SKIP_FETCH=false
+TLIB_ONLY=false
+TLIB_EXPORT_COMPILE_COMMANDS=false
+TLIB_ARCH=""
 NET=false
-TFM="net6.0"
+TFM="net8.0"
+GENERATE_DOTNET_BUILD_TARGET=true
 PARAMS=()
@@ -24,5 +28,8 @@
 RID="linux-x64"
+HOST_ARCH="i386"
+# Common cmake flags
+CMAKE_COMMON=""
 
 function print_help() {
-  echo "Usage: $0 [-cdvspnt] [-b properties-file.csproj] [--no-gui] [--skip-fetch] [--profile-build] [-- <ARGS>]"
+  echo "Usage: $0 [-cdvspnt] [-b properties-file.csproj] [--no-gui] [--skip-fetch] [--profile-build] [--tlib-only] [--tlib-export-compile-commands] [--tlib-arch <arch>] [--host-arch i386|aarch64] [-- <ARGS>]"
   echo
@@ -42,3 +49,9 @@
   echo "-B                                bundle target runtime (default value: $RID, requires --net, -t)"
-  echo "--profile-build                   build optimized for tlib profiling"
+  echo "-F                                select the target framework for which Renode should be built (default value: $TFM)"
+  echo "--profile-build                   build optimized for profiling"
+  echo "--tlib-only                       only build tlib"
+  echo "--tlib-arch                       build only single arch (implies --tlib-only)"
+  echo "--tlib-export-compile-commands    build tlibs with 'compile_commands.json' (requires --tlib-arch)"
+  echo "--host-arch                       build with a specific tcg host architecture (default: i386)"
+  echo "--skip-dotnet-target-generation   don't generate 'Directory.Build.targets' file, useful when experimenting with different build settings"
   echo "<ARGS>                            arguments to pass to the build system"
@@ -46,3 +59,3 @@
 
-while getopts "cdvpnstb:o:B:-:" opt
+while getopts "cdvpnstb:o:B:F:a:-:" opt
 do
@@ -81,2 +94,9 @@
       ;;
+    F)
+      if ! $NET; then
+        echo "-F requires --net being set"
+        exit 1
+      fi
+      TFM=$OPTARG
+      ;;
     -)
@@ -100,3 +120,28 @@
         "profile-build")
-          PARAMS+=('p:TlibProfilingBuild=true')
+          CMAKE_COMMON="-DPROFILING_BUILD=ON"
+          ;;
+        "tlib-only")
+          TLIB_ONLY=true
+          ;;
+        "tlib-arch")
+          # This only makes sense with '--tlib-only' set; it might as well imply it
+          TLIB_ONLY=true
+          shift $((OPTIND-1))
+          TLIB_ARCH=$1
+          OPTIND=2
+          ;;
+        "tlib-export-compile-commands")
+          if [ -z $TLIB_ARCH ]; then
+              echo "--tlib-export-compile-commands requires --tlib-arch begin set"
+              exit 1
+          fi
+          TLIB_EXPORT_COMPILE_COMMANDS=true
+          ;;
+        "host-arch")
+          shift $((OPTIND-1))
+          HOST_ARCH=$1
+          OPTIND=2
+          ;;
+        "skip-dotnet-target-generation")
+          GENERATE_DOTNET_BUILD_TARGET=false
           ;;
@@ -184,3 +229,4 @@
     BUILD_TARGET=Windows
-    TFM="net6.0-windows10.0.17763.0"
+    TFM="$TFM-windows10.0.17763.0"
+    RID="win-x64"
 else
@@ -189,10 +235,34 @@
 
+if [[ $GENERATE_DOTNET_BUILD_TARGET = true ]]; then
+  if $ON_WINDOWS; then
+    # CsWinRTAotOptimizerEnabled is disabled due to a bug in dotnet-sdk.
+    # See: https://github.com/dotnet/sdk/issues/44026
+    OS_SPECIFIC_TARGET_OPTS='<CsWinRTAotOptimizerEnabled>false</CsWinRTAotOptimizerEnabled>'
+  fi
+
+cat <<EOF > "$(get_path "$PWD/Directory.Build.targets")"
+<Project>
+  <PropertyGroup>
+    <TargetFrameworks>$TFM</TargetFrameworks>
+    ${OS_SPECIFIC_TARGET_OPTS:+${OS_SPECIFIC_TARGET_OPTS}}
+  </PropertyGroup>
+</Project>
+EOF
+
+fi
+
 if $NET
 then
+  export DOTNET_CLI_TELEMETRY_OPTOUT=1
   CS_COMPILER="dotnet build"
   TARGET="`get_path \"$PWD/Renode_NET.sln\"`"
+  BUILD_TYPE="dotnet"
 else
   TARGET="`get_path \"$PWD/Renode.sln\"`"
+  BUILD_TYPE="mono"
 fi
 
+OUT_BIN_DIR="$(get_path "output/bin/${CONFIGURATION}")"
+BUILD_TYPE_FILE=$(get_path "${OUT_BIN_DIR}/build_type")
+
 # Verify Mono and mcs version on Linux and macOS
@@ -203,3 +273,3 @@
         MINIMUM_MONO=`get_min_mono_version`
-        echo "mcs not found. Renode requries Mono $MINIMUM_MONO or newer. Please refer to documentation for installation instructions. Exiting!"
+        echo "mcs not found. Renode requires Mono $MINIMUM_MONO or newer. Please refer to documentation for installation instructions. Exiting!"
         exit 1
@@ -237,20 +307,3 @@
 
-# Build CCTask in Release configuration
-CCTASK_OUTPUT=`mktemp`
-CCTASK_BUILD_ARGS=($NET_FRAMEWORK_VER p:Configuration=Release p:Platform="\"$BUILD_PLATFORM\"")
-set +e
-CCTASK_SLN=CCTask.sln
-if $NET
-then
-    CCTASK_SLN=CCTask_NET.sln
-fi
-eval "$CS_COMPILER $(build_args_helper "${CCTASK_BUILD_ARGS[@]}") $(get_path $ROOT_PATH/lib/cctask/$CCTASK_SLN)" 2>&1 > $CCTASK_OUTPUT
-
-if [ $? -ne 0 ]; then
-    cat $CCTASK_OUTPUT
-    rm $CCTASK_OUTPUT
-    exit 1
-fi
-rm $CCTASK_OUTPUT
-set -e
+CORES_PATH="$ROOT_PATH/src/Infrastructure/src/Emulator/Cores"
 
@@ -259,19 +312,22 @@
 then
-    if ! $NET
-    then
-      PARAMS+=(t:Clean)
-    fi
-    for conf in Debug Release
+    for project_dir in $(find "$(get_path "${ROOT_PATH}/src")" -iname '*.csproj' -exec dirname '{}' \;)
     do
-      for build_target in Windows Mono Headless
+      for dir in {bin,obj}/{Debug,Release}
       do
-        if $NET
+        output_dir="$(get_path "${project_dir}/${dir}")"
+        if [[ -d "${output_dir}" ]]
         then
-            dotnet clean $(build_args_helper ${PARAMS[@]}) $(build_args_helper p:Configuration=${conf}${build_target}) "$TARGET"
-        else
-            $CS_COMPILER $(build_args_helper ${PARAMS[@]}) $(build_args_helper p:Configuration=${conf}${build_target}) "$TARGET"
+          echo "Removing: ${output_dir}"
+          rm -rf "${output_dir}"
         fi
       done
-      rm -fr $OUTPUT_DIRECTORY/bin/$conf
     done
+
+    # Manually clean the main output directory as it's location is non-standard
+    main_output_dir="$(get_path "${OUTPUT_DIRECTORY}/bin")"
+    if [[ -d "${main_output_dir}" ]]
+    then
+      echo "Removing: ${main_output_dir}"
+      rm -rf "${main_output_dir}"
+    fi
     exit 0
@@ -279,2 +335,13 @@
 
+# Check if a full rebuild is needed
+if [[ -f "$BUILD_TYPE_FILE" ]]
+then
+  if [[ "$(cat "$BUILD_TYPE_FILE")" != "$BUILD_TYPE" ]]
+  then
+    echo "Attempted to build Renode in a different configuration than the previous build"
+    echo "Please run '$0 -c' to clean the previous build before continuing"
+    exit 1
+  fi
+fi
+
 # check weak implementations of core libraries
@@ -286,12 +353,105 @@
 
+# Paths for tlib
+CORES_BUILD_PATH="$CORES_PATH/obj/$CONFIGURATION"
+CORES_BIN_PATH="$CORES_PATH/bin/$CONFIGURATION"
+
+# Cmake generator, handled in their own variable since the names contain spaces
+if $ON_WINDOWS
+then
+    CMAKE_GEN="-GMinGW Makefiles"
+else
+    CMAKE_GEN="-GUnix Makefiles"
+fi
+
+# Macos architecture flags, to make rosetta work properly
+if $ON_OSX
+then
+  CMAKE_COMMON+=" -DCMAKE_OSX_ARCHITECTURES=x86_64"
+  if [ $HOST_ARCH == "aarch64" ]; then
+    CMAKE_COMMON+=" -DCMAKE_OSX_ARCHITECTURES=arm64"
+  fi
+fi
+
+# This list contains all cores that will be built.
+# If you are adding a new core or endianness add it here to have the correct tlib built
+CORES=(arm.le arm.be arm64.le arm-m.le arm-m.be ppc.le ppc.be ppc64.le ppc64.be i386.le x86_64.le riscv.le riscv64.le sparc.le sparc.be xtensa.le)
+
+# if '--tlib-arch' was used - pick the first matching one
+if [[ ! -z $TLIB_ARCH ]]; then
+  NONE_MATCHED=true
+  for potential_match in "${CORES[@]}"; do
+    if [[ $potential_match == "$TLIB_ARCH"* ]]; then
+      CORES=($potential_match)
+      echo "Compiling tlib for $potential_match"
+      NONE_MATCHED=false
+      break
+    fi
+  done
+  if $NONE_MATCHED ; then
+    echo "Failed to match any tlib arch"
+    exit 1
+  fi
+fi
+
+# build tlib
+for core_config in "${CORES[@]}"
+do
+    CORE="$(echo $core_config | cut -d '.' -f 1)"
+    ENDIAN="$(echo $core_config | cut -d '.' -f 2)"
+    BITS=32
+    # Check if core is 64-bit
+    if [[ $CORE =~ "64" ]]; then
+      BITS=64
+    fi
+    # Core specific flags to cmake
+    CMAKE_CONF_FLAGS="-DTARGET_ARCH=$CORE -DTARGET_WORD_SIZE=$BITS -DCMAKE_BUILD_TYPE=$CONFIGURATION"
+    CORE_DIR=$CORES_BUILD_PATH/$CORE/$ENDIAN
+    mkdir -p $CORE_DIR
+    pushd "$CORE_DIR" > /dev/null
+    if [[ $ENDIAN == "be" ]]; then
+        CMAKE_CONF_FLAGS+=" -DTARGET_BIG_ENDIAN=1"
+    fi
+    if [[ "$TLIB_EXPORT_COMPILE_COMMANDS" = true ]]; then
+        CMAKE_CONF_FLAGS+=" -DCMAKE_EXPORT_COMPILE_COMMANDS=1"
+    fi
+    cmake "$CMAKE_GEN" $CMAKE_COMMON $CMAKE_CONF_FLAGS -DHOST_ARCH=$HOST_ARCH $CORES_PATH
+    cmake --build .
+    CORE_BIN_DIR=$CORES_BIN_PATH/lib
+    mkdir -p $CORE_BIN_DIR
+    if $ON_OSX; then
+        # macos `cp` does not have the -u flag
+        cp -v tlib/*.so $CORE_BIN_DIR/
+    else
+        cp -u -v tlib/*.so $CORE_BIN_DIR/
+    fi
+    # copy compile_commands.json to tlib directory
+    if [[ "$TLIB_EXPORT_COMPILE_COMMANDS" = true ]]; then
+       command cp -v -f $CORE_DIR/compile_commands.json $CORES_PATH/tlib/
+    fi
+    popd > /dev/null
+done
+
+if $TLIB_ONLY
+then
+    exit 0
+fi
+
 # build
 eval "$CS_COMPILER $(build_args_helper "${PARAMS[@]}") $TARGET"
+echo -n "$BUILD_TYPE" > "$BUILD_TYPE_FILE"
 
 # copy llvm library
-if $NET
-then
-  cp src/Infrastructure/src/Emulator/Peripherals/bin/$CONFIGURATION/$TFM/libllvm-disas.* output/bin/$CONFIGURATION/$TFM
+LLVM_LIB="libllvm-disas"
+if [[ $HOST_ARCH == "aarch64" ]]; then
+  # aarch64 host binaries have a different name
+  LLVM_LIB="libllvm-disas-aarch64"
+fi
+if [[ "${DETECTED_OS}" == "windows" ]]; then
+  LIB_EXT="dll"
+elif [[ "${DETECTED_OS}" == "osx" ]]; then
+  LIB_EXT="dylib"
 else
-  cp src/Infrastructure/src/Emulator/Peripherals/bin/$CONFIGURATION/libllvm-disas.* output/bin/$CONFIGURATION
+  LIB_EXT="so"
 fi
+cp lib/resources/llvm/$LLVM_LIB.$LIB_EXT $OUT_BIN_DIR/libllvm-disas.$LIB_EXT
 
@@ -326,11 +486,24 @@
     then
-        # Restore dependecies for linux-x64 runtime. It prevents error NETSDK1112 during publish.
-        dotnet restore --runtime linux-x64 Renode_NET.sln
-
-        eval "dotnet publish -f $TFM --self-contained false $(build_args_helper "${PARAMS[@]}") $TARGET"
-        export RID TFM
-        $ROOT_PATH/tools/packaging/make_linux_dotnet_package.sh $params
+        # dotnet package on linux uses a separate script
+        if $ON_LINUX
+        then
+            # maxcpucount:1 to avoid an error with multithreaded publish
+            eval "dotnet publish -maxcpucount:1 -f $TFM --self-contained false $(build_args_helper "${PARAMS[@]}") $TARGET"
+            export RID TFM
+            $ROOT_PATH/tools/packaging/make_linux_dotnet_package.sh $params
+            # Source package bundles nuget dependencies required for building the dotnet version of Renode
+            # so it can only be built when using dotnet. The generated package can also be used with Mono/.NETFramework
+            $ROOT_PATH/tools/packaging/make_source_package.sh $params
+        elif $ON_WINDOWS && ! $PORTABLE
+        then
+            # No Non portable dotnet package on windows yet
+            echo "Only portable dotnet packages are supported on windows. Rerun build.sh with -t flag to build portable"
+            exit 1
+        elif $ON_OSX
+        then
+            echo "dotnet packages not supported on ${DETECTED_OS}"
+            exit 1
+        fi
     else
         $ROOT_PATH/tools/packaging/make_${DETECTED_OS}_packages.sh $params
-        $ROOT_PATH/tools/packaging/make_source_package.sh $params
     fi
@@ -341,16 +514,17 @@
     PARAMS+=(p:PORTABLE=true)
-    if $ON_LINUX
+    if $NET
     then
-      if $NET
-      then
-          eval "dotnet publish -r $RID -f $TFM --self-contained true $(build_args_helper "${PARAMS[@]}") $TARGET"
-          export RID TFM
-          $ROOT_PATH/tools/packaging/make_linux_portable_dotnet.sh $params
-      else
-          $ROOT_PATH/tools/packaging/make_linux_portable.sh $params
-      fi
+        # maxcpucount:1 to avoid an error with multithreaded publish
+        eval "dotnet publish -maxcpucount:1 -r $RID -f $TFM --self-contained true $(build_args_helper "${PARAMS[@]}") $TARGET"
+        export RID TFM
+        $ROOT_PATH/tools/packaging/make_${DETECTED_OS}_portable_dotnet.sh $params
     else
-      echo "Portable packages are only available on Linux. Exiting!"
-      exit 1
+        if $ON_LINUX
+        then
+            $ROOT_PATH/tools/packaging/make_linux_portable.sh $params
+        else
+            echo "Portable packages for Mono are only available on Linux. Exiting!"
+            exit 1
+        fi
     fi
-fi
+fi
\ No newline at end of file
